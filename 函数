def f1():
  print(123)
  return '111'——————————一 一旦执行return，函数执行过程立即终止
  print(456)
x=f1()
print(x)
》》》》》
123
111


def f1():
  print('xxxxxx')
r=f1()
print(r)
》》》》》
xxxxx
None——————————无return时默认 返回为None


def send(xx,yy,zz):
  print('what are you:',xx,yy,zz)
while True:
  r=input('please input your name:')
  result=send(r,'is','AI')
  
  
def send(xx,content,yy='AI'):
  print("what are you:",xx,content,yy)
while True:
  r=input("please input your name:")
  result=send(r,'is')
》》》》》
what are you: lowato is AI


def send(xx,content,yy='AI'):—————————yy为形式参数，只能放在参数列表的最后
    print("what are you:",xx,content,yy)
while True:
    r=input("please input your name:")
    result=send(r,'is'，'EI')
》》》》》
what are you: lowato is EI


def send(xx,yy):
  print(xx,'is',yy)
send('lowato','AI')
》》》》》
lowato is AI


def send(xx,yy):
  print(xx,'is',yy)
send(yy='lowato',xx='AI')————————指定函数
》》》》
AI is lowato


def f1(*args):————————————接收N个实际参数，类型为元组
  print(args)
f1(11,22,'lowato')
》》》》》
(11, 22, 'lowato')


def f1(*args):
  print(args)
r=[11,22,'lowato']
f1(r)—————————放入元组里，作为一个元素
f1(*r)——————————将列表的每个元素转化为元组里
》》》》》
([11, 22, 'lowato'],)
(11, 22, 'lowato')


def f1(*args):
  print(args)
r='lowato'
f1(r)
f1(*r)
》》》》
('lowato',)
('l', 'o', 'w', 'a', 't', 'o')


def f1(**kwargs):——————————— 类型为字典
  print(kwargs)
f1(n1='lowato',n2=18)
》》》》》
{'n1': 'lowato', 'n2': 18}


def f1(**kwargs):
  print(kwargs)
dic={'n1':'lowato','n2':'c'}
f1(r=dic)
f1(**dic)
》》》》》
{'r': {'n1': 'lowato', 'n2': 'c'}}
{'n1': 'lowato', 'n2': 'c'}


*————————默认将传入的参数，全部放置在元组
**————————默认将传入的参数，全部放置在字典中


def f1(*args,**kwargs):———————————只能*在前，**在后
  print(args)
  print(kwargs)
f1(11,22,33,n1='python',n2='c')
》》》》》
(11, 22, 33)
{'n1': 'python', 'n2': 'c'}


s="I am {0},age {1}".format('lowato',18)
print(s)
s1="I am {0},age {1}".format(*['lowato',18])
print(s1)
》》》》》
I am lowato,age 18
I am lowato,age 18


s="I am {name},age {age}".format(name='lowato',age=18)
print(s)
dic={'name':'lowato','age':18}
s1="I am {name},age {age}".format(**dic)

print(s1)
》》》》》
I am lowato,age 18
I am lowato,age 18


def f1(s):
  s.append(999)—————————传递的为引用
r=[11,22,33]
f1(r)
print(r)
》》》》》》
[11, 22, 33, 999]


全局变量———————所有作用域都可读
定义全局 变量 要大写
对全局变量重新赋值需global

NAME='messi'
def f1():
  NAME='lowato'——————————只改变局部域
  print(NAME)
def f2():
  print(NAME)
f1()
f2()
》》》》
lowato
messi


NAME='messi'
def f1():
  global NAME——————————表示是全局变量
  NAME='lowato'
  print(NAME)
def f2():
  print(NAME)
f1()
f2()
》》》》
lowato
lowato


 特殊：列表字典可修改，不可重新赋值
R=[11,22,33]
def f1():
 R.append(999)
 print(R)
def f2():
 print(R)
f1()
f2()
》》》》》
[11, 22, 33, 999]
[11, 22, 33, 999]


#内置函数
abs————————绝对值函数
n=abs(-1)
print(n)
》》》》》
1


#bool—————————  查询布尔值，True or  False
print(bool(1))
》》》》》
True


#all————————所有为真，才为真
#any————————任一个为真，就为真
n=all([11,22,33])
print(n)
》》》》》
True

n=any([11,0,None])
print(n)
》》》》》
True


#进制转换
#bin—————————十进制转化为二进制
#oct—————————十进制转化为八进制
#hex—————————十进制转化为十六进制
print(bin(5))
print(oct(9))
print(hex(15))
》》》》》
0b101
0o11
0xf


#utf-8—————————1个汉字，3个字节
#gbk—————————1个汉字，2个字节

字符串转化为字节类型
n=bytes('阿宝',encoding="utf-8")
print(n)
》》》》》
b'\xe9\x98\xbf\xe5\xae\x9d'

n=bytes('阿宝',encoding="gbk")
print(n)
》》》》》
b'\xb0\xa2\xb1\xa6'

字节转化为字符串类型
str(bytes('阿宝',encoding="utf-8"),uft-8)


def f1():
  pass
print(callable(f1))———————————查询是否能被调用，能Ture，不能False
》》》》》
True


r=chr(65)——————————ascii码转换，数字转为对应的字符串
print(r)
》》》》
A

n=ord('B')——————————ascii码转换，字符串转为对应的数字
print(n)
》》》》》
66


s='print(123)'
r=compile(s,'<string>','exec')————————compile（）执行编译
exec(r)


s="8*8"——————————字符串
ret=eval(s)——————————执行表达式，并获取结果
print(ret)


exec(s)—————————无返回值，执行python代码，或字符串，接收代码或字符串


print(dir(list))——————————查看对象提供了哪些功能

help(list)——————————查看对象提供了哪些功能,并有详细解释


r=divmod(97,10)———————————97%10,并得到其商和余数
print(r)
print(r[0])
》》》》
(9,7)
(9)

n1,n2=divmod(97,10)
print(n1)
print(n2)
》》》》》
9
7


r="lowato"
s=isinstance(r,str)—————————判断r是否是str的实例
print(s)
》》》》
True

r='lowato'
s=ininstance(r,dict)
print(s)
》》》》》
False


#filter（函数，可迭代对象）—————————筛选符合条件的元素，函数返回True，将元素添加到结果中
def f1(a):
  if a>22:
  return True
r=[11,22,33,44,55]
ret=filter(f1,r)
print(list(ret)
》》》》》
[33, 44, 55]

r=[11,22,33,44,55]
result=filter(lambda a:a>33,r)
print(list(result))
》》》》》
[44, 55]


map(函数，可迭代对象(可for循环的东西))
r=[11,22,33,44,55]
def f1(a):
  return a+100
result=map(f1,r)
print(list(result))
》》》》》》
[111, 122, 133, 144, 155]

r=[11,22,33,44,55]
result=map(lambda a:a+100 ,r)
print(list(result))
》》》》》
[111, 122, 133, 144, 155]


s="不不"
print((lens))————————按字符进行查看
》》》》》
2

s="不不"
b=bytes(s,encoding='utf-8')———————————转化成字节
print(len(b))
》》》》》
6


r=max([11,22,33,1])
print(r)
》》》》》
33

r=min([11,22,33,1])
print(r)
》》》》》
1

r=sum([11,22,33,1])
print(sum)
》》》》》
67


r=round(1.8)
print(r)
》》》》》
2

r=round(1.4)
print(r)
》》》》》
1


s1=['lowato',11,22,33]
s2=['is',11,22,33]
s3=['AI',11,22,33]
r=zip(s1,s2,s3)
temp=list(r)[0]
ret=" ".join(temp)
print(temp)
》》》》》
lowato is AI

s1=[11,22,33]
s2=[11]
r=zip(s1,s2)
print(list(r))
》》》》》
[(11, 11)]

