
#三元运算（三目运算）
name='alex' if 1==1 else 'SB'
print(name)


lambda表达式
def f1(s):
  return s+100
f2=lambda s:s+100
r1=f1(10)
print(r1)
r2=f2(9)
print(r2)
》》》》》
110
109


常用格式化

r="i am %s"%"alex"
print(r)
_____________
i am alex


r="i am %s,age %d"%("alex",18)
print(r)
____________
i am alex,age 18


r="i am %(name)s,age %(age)d"%{"name":"alex","age":18}
print(r)
_____________
i am alex,age 18


r="%.2f"%2.456654
print(r)
____________
2.46



r="i am %(pp).2f"%{"pp":123.42556}
print(r)
_____________
i am 123.43


r="i am %.2f %%"%123.42556
print(r)
_______________
i am 123.43 %


format形式

r="aaa {0} bbb {0} aaa {1}".format(123,"alex")
print(r)
_________________
aaa 123 bbb 123 aaa alex


r="-----{name:s}_______{age:d}===={name:s}".format(name="alex",age=123)
print(r)
___________________
-----alex_______123====alex


r="-----{:*^10s}=====".format('alex')    # *表示不够位用*填充  ^表示居中  10表示10个字符  s表示字符串
print(r)
________________
-----***alex***=====


r="-----{:.2%}".format(0.234567)
print(r)
_________________
-----23.46%


r="i am {},age {},{}".format("seven",18,"alex")    # 单独的{}只表示占位
print(r)
___________________
i am seven,age 18,alex


r="i am {},age {},{}".format(*["seven",18,"alex"])    # *表示列表，**表示字典，无*会将整个列表放入1个元素里
print(r)
—————————————————
i am seven,age 18,alex


r="numbers:{0:b},{0:o},{0:d},{0:x},{0:X},{0:%}".format(15)
print(r)
____________________
numbers:1111,17,15,f,F,1500.000000%


生成器
函数里有yield就是生成器

def func():
    yield 1
    yield 2
    yield 3
    yield 4
ret=func()
for i in ret:
    print(i)
___________________
1
2
3
4


 def func():
    print(111)           #保存上一次执行的位置，下一次再执行的时候，从那继续往下走
    yield 1
    print(222)
    yield 2
    print(333)
    yield 3
ret=func()
r1=ret.__next__()        #进入函数找到yield，获取yield后面的数据
print(r1)
r2=ret.__next__()
print(r2)
r3=ret.__next__()
print(r3)
__________________
111
1
222
2
333
3


def myrange(arg):
    start=0
    while True:
        if start>arg:
            return
        yield start
        start+=1
ret=myrange(3)
r1=ret.__next__()
print(r1)
r2=ret.__next__()
print(r2)
r3=ret.__next__()
print(r3)
____________
0
1
2


递归
def d():
    return '123'
def c():
    r=d()
    return r
def b():
    r=c()
    return r
def a():
    r=b()
    return r
f=a()
print(f)
______________
123


def func(n):
    n+=1
    if n>=4:
        return "end"
    return func(n)    
r=func(1)
print(r)
_______________
end


递归的例子
阶乘 1*2*3*4*5*6*7

def func(num):
    if num==1:
        return 1
    return num*func(num-1)
x=func(7)
print(x)
_________________
5040



