#python:模块   其它:类库

#模块分类：内置模块;第三方模块;自定义模块.

#先导入，后使用

#import aaa.bbb(aaa为模块所在的文件夹名，无时可省略；bbb为模块名)

#为什么要有模块？
将代码归类

#导入模块的依据？
import sys
sys.path

import sys
sys.path.append('E:\\')————————()里为模块所在的盘的位置


#导入模块
import s4
s4.login()

or

from s4 import login
login()


import lib.commons
lib.commons.f1()


or

from lib import commons
commons.f1()


from s4 import *——————————*为导入所有模块
login()
logout()


#推荐：
单模块:import
嵌套在文件夹下:
from xxx import xxx
from xxx import xxx as(别名)


#序列化

#json

import json
dic={'k1':'v1'}
print(dic,type(dic))
result=json.dumps(dic))  #将python基本数据类型转化成字符串形式
print(result,type(result))
》》》》》
{'k1': 'v1'} <class 'dict'>
{"k1": "v1"} <class 'str'>


s1='{"k1":123}'
improt json
dic=json.loads(s1)    #将python字符串形式转化成基本数据类型
print(dic,type(dic))
_______________

{'k1': 123} <class 'dict'>


import json
r=[11,22,33]
json.dump(r,open('文件名','w'))  #转化成字符串，并在一个文件里写入
r=json.load(open('文件名','r'))  #转化成python基本数据类型,并从文件读出
print(r)



#pickle—————————只用于python

import pickle
r=[11,22,33]
r.pickle.dumps(r)  #用法和json一样
print(r)
result=pcikle.loads(r)  #同上
print(result)
_______________

b'\x80\x03]q\x00(K\x0bK\x16K!e.'
[11, 22, 33]


import pickle
r=[11,22,33]
pickle.dump(r,open('文件名','wb'))     #只支持字节形式
result=pickle.load(open('文件名','rb'))
print(result,type(result))

json:更加适合跨语言，字符串，基本数据类型
pickle:python所有类型的序列化做操作，但仅适用于python


time模块

import time

print(time.time())    # 返回当前系统时间戳
________________
1477828647.0775943


print(time.ctime())    # 输出当前系统时间
________________
Sun Oct 30 19:58:42 2016


print(time.ctime(time.time()-86400))    # 将时间戳转化为字符串格式
________________
Sat Oct 29 19:59:59 2016



time_obj=time.gmtime()    # 将时间戳转化为struct_time格式
print(time_obj)
print(time_obj.tm_year,time_obj.tm_mon)
print("{year}-{month}".format(year=time_obj.tm_year,month=time_obj.tm_mon))
_____________________
time.struct_time(tm_year=2016, tm_mon=10, tm_mday=30, tm_hour=12, tm_min=1, tm_sec=40, tm_wday=6, tm_yday=304, tm_isdst=0)
2016 10
2016-10


print(time.localtime())    # 将格林威治时间转化为本地时间
____________________
time.struct_time(tm_year=2016, tm_mon=10, tm_mday=30, tm_hour=20, tm_min=7, tm_sec=28, tm_wday=6, tm_yday=304, tm_isdst=0)


print(time.mktime(time_obj))    # 将struct_time格式转化为时间戳格式
____________________
1477800556.0


time.sleep(4)    #运行后停留4秒再输出


print(time.strftime("%Y-%m-%d %H:%M%S",time.gmtime()))    # 将struct_time格式转成指定的字符串格式
________________
2016-10-30 12:1255


print(time.strptime("2016-06-5 15:06","%Y-%m-%d %H:%M"))    # 将字符串转化成日期格式
_________________
time.struct_time(tm_year=2016, tm_mon=6, tm_mday=5, tm_hour=15, tm_min=26, tm_sec=0, tm_wday=6, tm_yday=157, tm_isdst=-1)


import datetime

print(datetime.date.today())    # 输出当前日期
________________
2016-10-30


current_time=datetime.datetime.now()     # 输出当前时间
print(current_time)
___________________
2016-10-30 20:24:02.127164


print(datetime.datetime.now()+datetime.timedelta(days=10))    # 在现在时间的基础上加10天
___________________
2016-11-09 20:26:12.671852


print(datetime.datetime.now()+datetime.timedelta(days=-10))    #在现在时间的基础上减10天
___________________
2016-10-20 20:28:23.799030


print(current_time.replace(2015,5))    #替换
___________________
2015-05-30 20:29:56.881468


str_to_date=datetime.datetime.strptime("21/11/2006 20:38","%d/%m/%Y %H:%M")    #将字符串转化成日期格式
___________________
2006-11-21 20:38:00



反射

import xxxxxx
def run():
     inp=input("请输入要访问的url:")
    if hasattr(xxxxxx,inp):         #在xxxxxx模块里去检查所输入的函数名是否存在，True or False
        func=getattr(xxxxxx,inp)    #去xxxxxx模块里找所输入的函数名
        func()
    else:
        print('404')
if __name__=='__main__':
    run()

delattr()    #去模块里删除某个成员
setattr()    #去模块里设定（添加）某个成员


obj=__import__("xxxxxx")    ==    import xxxxxx
obj.login()                       xxxxxx.login()


当要导入的模块在一个文件夹时
obj=__import__("lib."+m,fromlist=Ture)    #lib.为文件夹名


logging模块(日志管理)

import logging
logging.warning("user [alex] attempted wrong password more than 3 times")
logging.critical("server is down")


日志级别：
debug:最详细的调试信息  10
info:纪律  20
warning:出现警告  30
error:出错  40
critical：严重  50


将日志写入文件
import logging
logging.basicConfig(filename="123.log",level=logging.INFO)    # level为等级，logging.INFO表示只有该级别或该级别以上才写入
logging.DEBUG("this message should go to the log file")
logging.INFO("so should this")
logging.WARNING("and this,too")

                    
import logging
#create logger

logger=logging.getLogger("test_log")     #get the logger object first
logger.setLevel(logging.DEBUG)           #set a global log level

#create console handler and set level to debug

ch=logging.StreamHandler()    #print the log on monitor
ch.setLevel(logging.DEBUG)    #set level to output in monitor

#create file handler and set level to warning

fh=logging.FileHandler("access_log")    
fh.setLevel(logging.WARNING)     #set level to output in file

#create formatter

formatter=logging.Formatter("%(asctime)s-%(name)s-%(levelname)s-%(message)s")

#add formatter to ch and fh

ch.setFormatter(formatter)
fh.setFormatter(formatter)

#add ch and fh to logger

logger.addHandler(ch)    #tell the logger to input the log into specified handler
logger.addHandler(fh)

#'application' code

logger.debug("debug message")
logger.info("info message")
logger.warning("warn message")
logger.error("error message")
logger.critical("critical message")


import s2
print(vars(s2))    # 查看s2模块中有哪些变量


'''
我是注释
'''
print(__doc__)    # 获取注释


print(__file__)    # 当前py文件所在的路径


import sys
import os
os.path.abspath(__file__)                        # 获取某个文件的绝对路径
os.path.dirname(os.path.abspath(__file__))       # 找到某个文件的上级目录
ret=sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
print(ret)


print(__package_)    # 查询文件在哪个包里（是否有上级文件），无时输出None


def run():
        print("123")
if __name__=="__main__":    # 只有在当前py文件里函数才会执行。被导入调用不会执行
        run()
        

sys模块：模块用于提供对python解释器相关操作

进度条

import sys
import time
def view_bar(num,total):
        rate=num/total
        rate_num=int(rate*100)
        r='\r%d%%'%(rate_num)    # \r表示重新回到当前行的首个位置
        #print(r)      # 输出时会自动换行
        sys.stdout.write(r)    # 输出时不加换行符
        sys.stdout.flush()     # 输出清空
if __name__=="__main__":
        for i in range(0,101):
                time.sleep(0.1)
                view_bar(i,100)
                
import sys
import time
def view_bar(num,total):
        rate=num/total
        rate_num=int(rate*100)
        r1='\r%s>%d%%'%("="*num,rate_num)
        sys.stdout.write(r1)
        sys.stdout.flush()
if __name__=="__main__":
        for i in range(0,101):
                time.sleep(0.1)
                view_bar(i,100)        


os模块:模块用于提供系统级别的操作

os.path.join(path1[,path2[,···]])    # 路径拼接
os.path.join(settings.user,card,xman)    # 将这3个目录从左到右连接


hashlib:用于执行加密操作

import hashlib
obj=hashlib.md5()
obj.update(bytes('123',encoding='utf-8'))
result=obj.hexdigest()
print(result)
_____________________
202cb962ac59075b964b07152d234b70


正则表达式
re模块

import re
r=re.findall("alex","subwayalexdebug")    # 查找'alex'是否在其中，有返回['alex']，无返回[]
print(r)
______________________
['alex']


2元字符: .  ^  $  *  +  ?  {}  []  |  ()  \  ···

import re

r=re.findall('al.x',"subwayalexdebug")    # . 代表一个字符
print(r)
_______________________
['alex']


import re
r=re.findall('^alex','subwayalexdebug')    #查询想要查询的字符是否在起始位（开头）
r=re.findall('alex$,'subwayalexdebug')     #查询想要查询的字符是否在最后面
print(r)
_______________________
[]


import re
r=re.findall('al.+x','subwayaledebugx')      # .+ 代表1到多个字符
r=re.findall('al.*x','subwayaledebugx')      # .* 代表0到多个字符
r=re.findall('al.？x','subwayaledebugx')     # .? 代表1个或0个（没有）
r=re.findall('al(3)x','subwayaledebugx')     # .(3) 可代表3个字符
r=re.findall('a[bc]d','aubwayabcd')          # a[bc]d表示abd或acd
r=re.findall('a[a-z]d','subwayatd')          # [a-z]表示a到z的字符都能匹配上
r=re.findall('a[1-9]d','fva4dd')
r=re.findall('a[^f]d','aed')                 # [^f]表示不是f的任意字符都能匹配到，^在表示[]里表示非\否  
r=re.findall('a[\d]d','a6d')                 # [\d]表示任意一个数字
print(r)


a=re.match('com','comwww.runcomoob')    # 匹配com，只匹配字符串的起始位置，匹配成功返回所在位置
r=a.span()
print(r)
_________________
(0, 3)

a=re.match('com','comwww.runcomoob').group()    # 得到匹配结果
print(a)
__________________
com

a=re.search('com','www.runcomoob')    # 匹配第一个信息
print(a)


finditer():与findall一样，返回diter对象
findall:返回列表


r=re.sub('g.t','have','i get A,i got B,i gut C')    # 在字符串里面将"g.t"格式替换成'have'
r1=re.sub('g.t','have','i get A,i got B,i gut C',2)     # 2为设置最大替换次数
print(r)
print(r1)
______________________
i have A,i have B,i have C
i have A,i have B,i gut C


subn():与sub一样，但会输出替换次数
r=re.subn('g.t','have','i get A,i got B,i gut C') 
print(r)
________________
('i have A,i have B,i have C', 3)


r=re.split('\d+','one 1 two 2 three 3 four 4')     # 按数字进行分割
print(r)
_________________
['one ', ' two ', ' three ', ' four ', '']


a=re.search(r'\\com','www.run\comoob').group()    # r声明'\\'为普通字符
print(a)
________________
\com


import re
origin='has xxooxyzabc'
r=re.match("h\w+",origin)    # \w表示字母，数字，下划线
print(r.group())             # 获取匹配到的所有结果
print(r.groups())            # 获取模型中匹配到的分组结果(元祖)
print(r.groupdict())         # 获取模型中匹配到的分组结果(字典)
__________________
has
()
{}


import re
origin="has xxooxyzabc"
r=re.match("h(\w+)",origin)
print(r.group())
print(r.groups())
print(r.groupdict())
__________________
has
('as',)
{}


import re
origin="hasaabc xxoo halaabc m179"
r=re.findall("h(\w+)a(ab)c",origin)
print(r)
__________________
[('as', 'ab'), ('al', 'ab')]


import re
origin="hello alex bcd alex lge alex acd 19"
r=re.split("alex",origin,1)     # 用第一个'alex'进行分割
print(r)
_____________________
['hello ', ' bcd alex lge alex acd 19']


import re
origin="hello alex bcd alex lge alex acd 19"
r=re.split("a(le)x",origin,1)
r1=re.split("(alex)",origin,1)
r2=re.split("(a(le)x)",origin,1)
print(r)
print(r1)
print(r2)
_________________
['hello ', 'le', ' bcd alex lge alex acd 19']
['hello ', 'alex', ' bcd alex lge alex acd 19']
['hello ', 'alex', 'le', ' bcd alex lge alex acd 19']

