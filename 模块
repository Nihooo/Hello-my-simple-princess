#python:模块   其它:类库

#模块分类：内置模块;第三方模块;自定义模块.

#先导入，后使用

#import aaa.bbb(aaa为模块所在的文件夹名，无时可省略；bbb为模块名)

#为什么要有模块？
将代码归类

#导入模块的依据？
import sys
sys.path

import sys
sys.path.append('E:\\')————————()里为模块所在的盘的位置


#导入模块
import s4
s4.login()

or

from s4 import login
login()


import lib.commons
lib.commons.f1()


or

from lib import commons
commons.f1()


from s4 import *——————————*为导入所有模块
login()
logout()


#推荐：
单模块:import
嵌套在文件夹下:
from xxx import xxx
from xxx import xxx as(别名)


#序列化

#json

import json
dic={'k1':'v1'}
print(dic,type(dic))
result=json.dumps(dic))  #将python基本数据类型转化成字符串形式
print(result,type(result))
》》》》》
{'k1': 'v1'} <class 'dict'>
{"k1": "v1"} <class 'str'>


s1='{"k1":123}'
improt json
dic=json.loads(s1)    #将python字符串形式转化成基本数据类型
print(dic,type(dic))
_______________

{'k1': 123} <class 'dict'>


import json
r=[11,22,33]
json.dump(r,open('文件名','w'))  #转化成字符串，并在一个文件里写入
r=json.load(open('文件名','r'))  #转化成python基本数据类型,并从文件读出
print(r)



#pickle—————————只用于python

import pickle
r=[11,22,33]
r.pickle.dumps(r)  #用法和json一样
print(r)
result=pcikle.loads(r)  #同上
print(result)
_______________

b'\x80\x03]q\x00(K\x0bK\x16K!e.'
[11, 22, 33]


import pickle
r=[11,22,33]
pickle.dump(r,open('文件名','wb'))     #只支持字节形式
result=pickle.load(open('文件名','rb'))
print(result,type(result))

json:更加适合跨语言，字符串，基本数据类型
pickle:python所有类型的序列化做操作，但仅适用于python


time模块

import time

print(time.time())    # 返回当前系统时间戳
________________
1477828647.0775943


print(time.ctime())    # 输出当前系统时间
________________
Sun Oct 30 19:58:42 2016


print(time.ctime(time.time()-86400))    # 将时间戳转化为字符串格式
________________
Sat Oct 29 19:59:59 2016


time_obj=time.gmtime()    # 将时间戳转化为struct_time格式
print(time_obj)
print(time_obj.tm_year,time_obj.tm_mon)
print("{year}-{month}".format(year=time_obj.tm_year,month=time_obj.tm_mon))
_____________________
time.struct_time(tm_year=2016, tm_mon=10, tm_mday=30, tm_hour=12, tm_min=1, tm_sec=40, tm_wday=6, tm_yday=304, tm_isdst=0)
2016 10
2016-10


print(time.localtime())    # 将格林威治时间转化为本地时间
____________________
time.struct_time(tm_year=2016, tm_mon=10, tm_mday=30, tm_hour=20, tm_min=7, tm_sec=28, tm_wday=6, tm_yday=304, tm_isdst=0)


print(time.mktime(time_obj))    # 将struct_time格式转化为时间戳格式
____________________
1477800556.0


time.sleep(4)    #运行后停留4秒再输出


print(time.strftime("%Y-%m-%d %H:%M%S",time.gmtime()))    # 将struct_time格式转成指定的字符串格式
________________
2016-10-30 12:1255


print(time.strptime("2016-06-5 15:06","%Y-%m-%d %H:%M"))    # 将字符串转化成日期格式
_________________
time.struct_time(tm_year=2016, tm_mon=6, tm_mday=5, tm_hour=15, tm_min=26, tm_sec=0, tm_wday=6, tm_yday=157, tm_isdst=-1)


import datetime

print(datetime.date.today())    # 输出当前日期
________________
2016-10-30


current_time=datetime.datetime.now()     # 输出当前时间
print(current_time)
___________________
2016-10-30 20:24:02.127164


print(datetime.datetime.now()+datetime.timedelta(days=10))    # 在现在时间的基础上加10天
___________________
2016-11-09 20:26:12.671852


print(datetime.datetime.now()+datetime.timedelta(days=-10))    #在现在时间的基础上减10天
___________________
2016-10-20 20:28:23.799030


print(current_time.replace(2015,5))    #替换
___________________
2015-05-30 20:29:56.881468


str_to_date=datetime.datetime.strptime("21/11/2006 20:38","%d/%m/%Y %H:%M")    #将字符串转化成日期格式
___________________
2006-11-21 20:38:00
